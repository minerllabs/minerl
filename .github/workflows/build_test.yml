name: Build wheels

on: [workflow_dispatch] #, pull_request]

# todo: Support windows
# todo: make new docker image which includes java
# todo: get s3 upload to work.
# todo: support sdist!

jobs:
  build_wheels_linux:
    name:  ${{ matrix.os }} ${{ matrix.pver }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04] #, windows-latest, macos-latest]
        pver: ["cp35*x86_64", "cp36*x86_64", "cp37*x86_64", "cp38*x86_64"] # Todo add 39.
    env:
      # build using the manylinux2014 image
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      CIBW_MANYLINUX_I686_IMAGE: manylinux2014
      CIBW_BUILD: "${{ matrix.pver }}" 
      CIBW_SKIP: cp27-* pp27-*
      CIBW_BEFORE_BUILD_LINUX: |
        yum install -y  \
          java-1.8.0-openjdk-devel 
        # Why the fuck is there no headless-devel package like on debian!

        # Add the Java dependencies to the
        echo "$(/opt/python/cp37-cp37m/bin/pip show auditwheel | grep "Location:" | cut -d ':' -f2)/auditwheel/policy/policy.json" | xargs \
          python -c "import sys; import json; import os; fname = sys.argv[1]; fread = open(fname, 'r'); obj = json.load(fread); fread.close(); print(obj[-1]); [o['lib_whitelist'].extend('libXcursor.so.1, libXfixes.so.3, libXi.so.6, libXrandr.so.2, libXtst.so.6, libXxf86vm.so.1, libawt.so, libawt_xawt.so, libjava.so, libjawt.so, libjvm.so, libncurses.so.5, libtinfo.so.5, libverify.so'.split(', ')) for o in obj]; print(obj[-1]['lib_whitelist']); fwrite = open(fname, 'w'); json.dump(obj, fwrite); fwrite.close(); fread = open(fname, 'r'); print(json.load(fread)[-1])"


      CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel -v repair -w {dest_dir} {wheel}"
      CIBW_BEFORE_BUILD: pip install .

    steps:
      - uses: actions/checkout@v2
        with: 
          submodules: 'recursive'

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - uses: actions/setup-java@v1.3.0 # This is for MacOS and Windows
        with:
          java-version: '8' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64

      # TODO Run testing here! (Or we could run it in a different workflow.)


      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==1.5.2


      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

      - uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.AWS_MINERL_BUCKET }}
          source_dir: './wheelhouse'
          destination_dir:  builds/${{ steps.vars.outputs.branch }}/${{ steps.vars.outputs.sha_short }}/

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'


      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

      - uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.AWS_MINERL_BUCKET }}
          source_dir: './dist/'
          destination_dir:  builds/${{ steps.vars.outputs.branch }}/${{ steps.vars.outputs.sha_short }}/



  # # upload_pypi:
  # #   needs: [build_wheels, build_sdist]
  # #   runs-on: ubuntu-latest
  # #   # upload to PyPI on every tag starting with 'v'
  # #   # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
  # #   # alternatively, to publish when a GitHub Release is created, use the following rule:
  # #   if: github.event_name == 'release' && github.event.action == 'published'
  # #   steps:
  # #     - uses: actions/download-artifact@v2
  # #       with:
  # #         name: artifact
  # #         path: dist

  # #     - uses: pypa/gh-action-pypi-publish@master
  # #       with:
  # #         user: __token__
  # #         password: ${{ secrets.pypi_password }}
  # #         To test: repository_url: https://test.pypi.org/legacy/